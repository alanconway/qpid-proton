#!/usr/bin/env python
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

"""
Script to control an external broker, used as part of a proton test.
"""
import os.path, sys, subprocess, json
try:
    from urllib.request import urlopen
except ImportError:
    from urllib2 import urlopen

artemis_exe = "@ARTEMIS_EXE@"

class Broker:
    def call(self, cmd):
        """Like subprocess.call but hide output unless there's an error"""
        p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
        (out, err) = p.communicate();
        if p.returncode != 0:
            sys.stderr.write(out+"\n")
        return p.returncode

    def artemis_service(self, *cmd):
        return self.call([os.path.join(directory, "bin", "artemis-service")] + list(cmd))

    def url_open(self, path):
        return urlopen("http://127.0.0.1:%s/%s" % (int(self.port)+1, path))

    def create(self):
        os.makedirs(self.directory)
        return call([artemis_exe, "create", directory, "--force", "--allow-anonymous",
                     "--default-port", self.port, "--http-port", str(int(self.port)+1),
                     "--user", "myUser", "--password", "myPassword", "--role", "myRole"])

    def start(self):
        artemis_service(self.directory, "start")

    def stop(self):
        artemis_service(self.directory, "force-stop")

    def alive(self):
        try:
            r = url_open(self.port, "jolokia/read/org.apache.activemq.artemis:brokerName=\"0.0.0.0\",module=Core,name=\"artemis\",serviceType=Acceptor,type=Broker/Started")
            if json.loads(r.read().decode())['value']:
                return 0
        except: pass
        return 1

    def make_queue(self, q):
        r = url_open(self.port, "jolokia/exec/org.apache.activemq.artemis:brokerName=\"0.0.0.0\",module=Core,serviceType=Server,type=Broker/createQueue(java.lang.String,java.lang.String)/%s/%s" % (q, q))
        j = json.loads(r.read().decode())
        if 'error' in j:
            sys.stderr.write(j['error']  + "\n")
            return 1
        return 0

if __name__ == "__main__":
    method, directory, port, *args = *sys.argv[1:]
    getattr(Broker(directory, port), method)(*args)
