#!/usr/bin/env python
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

"""
Script to control an external broker, used as part of a proton test.
"""
import os.path, sys, subprocess, json
try:
    from urllib.request import urlopen
except ImportError:
    from urllib2 import urlopen

artemis_exe = "@ARTEMIS_EXE@"

def call(cmd):
    """Like subprocess.call but hide output unless there's an error"""
    p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
    (out, err) = p.communicate();
    if p.returncode != 0:
        sys.stderr.write(out+"\n")
    return p.returncode

def artemis_service(directory, *cmd):
    return call([os.path.join(directory, "bin", "artemis-service")] + list(cmd))

def url_open(port, path):
    return urlopen("http://127.0.0.1:%s/%s" % (int(port)+1, path))

def create(directory, port):
    os.makedirs(directory)
    return call([artemis_exe, "create", directory, "--force", "--allow-anonymous",
                 "--default-port", port, "--http-port", str(int(port)+1),
                 "--user", "myUser", "--password", "myPassword", "--role", "myRole"])

def start(directory, port):
    artemis_service(directory, "start")

def stop(directory, port):
    artemis_service(directory, "force-stop")

def alive(directory, port):
    try:
        r = url_open(port, "jolokia/read/org.apache.activemq.artemis:brokerName=\"0.0.0.0\",module=Core,name=\"artemis\",serviceType=Acceptor,type=Broker/Started")
        if json.loads(r.read().decode())['value']:
            return 0
    except: pass
    return 1

def make_queue(directory, port, q):
    r = url_open(port, "jolokia/exec/org.apache.activemq.artemis:brokerName=\"0.0.0.0\",module=Core,serviceType=Server,type=Broker/createQueue(java.lang.String,java.lang.String)/%s/%s" % (q, q))
    j = json.loads(r.read().decode())
    if 'error' in j:
        sys.stderr.write(j['error']  + "\n")
        return 1
    return 0

if __name__ == "__main__":
    sys.exit(globals()[sys.argv[1]](*sys.argv[2:]))
